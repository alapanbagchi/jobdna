// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id
FROM auth.users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const regisgerUser = `-- name: RegisgerUser :one
INSERT INTO auth.users (email, password, role)
VALUES ($1, $2, $3)
RETURNING id, email, role, created_at, updated_at
`

type RegisgerUserParams struct {
	Email    string
	Password string
	Role     string
}

type RegisgerUserRow struct {
	ID        pgtype.UUID
	Email     string
	Role      string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) RegisgerUser(ctx context.Context, arg RegisgerUserParams) (RegisgerUserRow, error) {
	row := q.db.QueryRow(ctx, regisgerUser, arg.Email, arg.Password, arg.Role)
	var i RegisgerUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
